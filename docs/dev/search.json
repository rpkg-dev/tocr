[{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tocr.rpkg.dev/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee.","code":""},{"path":[]},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"general","dir":"","previous_headings":"","what":"General","title":"TODO","text":"cleaner approach parse MD relying commonmark::markdown_xml() pal::md_xml() builds upon former; besides ’s tinkr package also builds upon , to_xml() seems offer additional param anchor_links properly handle reference-style links (aren’t supported CommonMark?); tinkr also offers to_md() converts XML back (R)md","code":""},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"stuff-to-finish","dir":"","previous_headings":"","what":"stuff to finish","title":"TODO","text":"rename package tocr minor issue: ’s another R package named tocR crawl TOR sites (CRAN) -> ideally author rename torc! add_toc(): remove param add_title use title = NULL disable title remove Markdown footnotes TOC entries; example: https://gitlab.com/c2d-zda/i_voting_dataset/blob/master/ANALYSIS.md finish intro-Vignette add_toc(): add proper @description @details (.. link intro-Vignette) set testthat tests! separate md documents every feature without TOC –> running add_toc() needs produce identical results! huge mega md document (several ) without TOC –> running add_toc() needs produce identical result! see /home/salim/Schreibtisch/Markdown TOC - comment format.jpg","code":""},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs","title":"TODO","text":"umlauts aren’t lowercased requied (least format = \"gitlab\") fix handling trailing # header processing (adhere <try.commonmark.org>) duplicated h1 header (strange general) position > 7 < 27:","code":"readLines(con = \"https://raw.githubusercontent.com/thlorenz/doctoc/1d386261972d35c6bcd187d0a00e666f9d893d8d/README.md\") %>%   add_toc(position = 15) %>%     cat(sep = \"\\n\")"},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"TODO","text":"add add_anchor_symbols option (default: FALSE) adding HTML anchor link header text clickable 🔗 (U+1F517) symbol. default, use Markdown links, maybe add option color (light grey default) symbols? add backlinks? add position = \"existing\" make default (fallback \"\" TOC exists). just place TOC exact position already existing TOC. add support markdown_flavor=\"pandoc\", see http://pandoc.org/MANUAL.html#header-identifiers add support setext style headers possible, see http://pandoc.org/MANUAL.html#headers scan md R Markdown YAML header containing toc: true print warning possibility TOC duplication performance: scan md code block positions –> separate function make impossible insert TOC code blocks (otherwise won’t get removed anymore subsequent runs add_toc(); besides wouldn’t make sense anyway) better backlink removal: scan file anchor links contained multiple headers -> remove frequent one (link text length == 1 ) add yet another TOC listing mode: ordered auto-numbering headers (vgl. https://raw.githubusercontent.com/xbmc/xbmc/be9a679876c603fab82a19c565d5a187ca1b5910/docs/GIT-FU.md) add option format TOC entries bold /italic TOC level # (default: 1st level) add option set number spaces markdown indentation (maybe binary option à la indent_by_4_spaces use four spaces instead two) add options set number newlines TOC comments add option make TOC foldable enclosing HTML <details> <summary> tags. add option collapsible wrap TOC <details> tag title <summary> tag. Example TOC: https://github.com/netlify/addons/blob/6e888b3b80a6960de56d61596cb75986bb8955d3/README.md collapsible support following values: NULL (<details> tag) opened (default open) closed (default collapsed) Open question: backlinks still work ? opened? make package’s functionality available webservice. ideally completely serverless! notable tech: plumber, r package define RESTful web API endpoints using special comments. see book Creating APIs R Plumber details. OpenFaaS, anti-lock-tool manage event-driven functions microservices using Kubernetes. see blog post Serverless R functions OpenFaas introduction. possible serverless hosting: blog post Serverless R functions Cloud Run googleCloudRunner’s Cloud Run vignette good reads: R Kubernetes - serverless Shiny, R APIs scheduled scripts Introducing googleCloudRunner - serverless R Google Cloud Platform","code":""},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"to-add-a-toc","dir":"","previous_headings":"","what":"to add a TOC","title":"TODO","text":"broom drake youtube-dl","code":""},{"path":"https://tocr.rpkg.dev/dev/TODO.html","id":"to-spread-package","dir":"","previous_headings":"","what":"to spread package","title":"TODO","text":"https://github.com/rstudio/blogdown/issues/267","code":""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"add-a-fresh-toc-to-an-r-markdown-document","dir":"Articles","previous_headings":"","what":"Add a fresh TOC to an (R) Markdown document","title":"Introduction to tocr","text":"Adding table contents (TOC) pdftools README.md example simple : parameter md can specify single file path, single URL character vector (one string per line).","code":"tocr::add_toc(md = \"https://raw.githubusercontent.com/ropensci/pdftools/e7248d9956c7e73968628fa3a8ed37f0a8c23b37/README.md\") |> head(n = 15L) #>  [1] \"# pdftools\"                                                              \"\"                                                                        #>  [3] \"<!-- TOC BEGIN -- leave this comment untouched to allow auto update -->\" \"\"                                                                        #>  [5] \"## Table of contents\"                                                    \"\"                                                                        #>  [7] \"- [Introduction](#-introduction)\"                                        \"- [Installation](#-installation)\"                                        #>  [9] \"    - [Building from source](#-building-from-source)\"                    \"- [Getting started](#-getting-started)\"                                  #> [11] \"- [Bonus feature: rendering pdf](#-bonus-feature-rendering-pdf)\"         \"- [Limitations](#-limitations)\"                                          #> [13] \"\"                                                                        \"<!-- TOC END -- leave this comment untouched to allow auto update -->\"   #> [15] \"\""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"update-an-existing-toc-of-an-r-markdown-document","dir":"Articles","previous_headings":"","what":"Update an existing TOC of an (R) Markdown document","title":"Introduction to tocr","text":"demonstrate updating existing TOC, use doctoc README file already includes TOC generated doctoc. add_toc() recognizes TOC properly. find software-generated Markdown TOCs aren’t recognized add_toc(), please file issue. Now let’s use doctoc README appeared live end May 20181, replace/update TOC different one generated add_toc() display first 41 lines: removes existing TOC writes new one differs following characteristics: new TOC placed line 33 (line numbers counted original document). new TOC uses *, - symbol list TOC entries (semantically ). backlinks new TOC headers included TOC easier navigation. backlink text consists \\U1F446 \\U1F447 symbol depending header’s position. new TOC, first symbol gets used, otherwise second one.","code":"# TODO: Fix me!  \"https://raw.githubusercontent.com/thlorenz/doctoc/1d386261972d35c6bcd187d0a00e666f9d893d8d/README.md\" |>   tocr::add_toc(position = 33L,                 backlink_strings = c(\"\\U1F446\", \"\\U1F447\"),                 listing_style = \"*\") |>   magrittr::extract(1:41) |>   pal::cat_lines()"},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"remove-a-toc-from-an-r-markdown-document","dir":"Articles","previous_headings":"","what":"Remove a TOC from an (R) Markdown document","title":"Introduction to tocr","text":"Let’s use doctoc README file remove ’s TOC: Optionally can specify old_toc_id remove leftover backlinks. Note remove_toc() just convenience wrapper function around add_toc(..., position = \"none\").","code":"# TODO: Fix me! tocr::remove_toc(\"https://raw.githubusercontent.com/thlorenz/doctoc/1d386261972d35c6bcd187d0a00e666f9d893d8d/README.md\") |>   pal::cat_lines()"},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"remove-backlinks-only","dir":"Articles","previous_headings":"Remove a TOC from an (R) Markdown document","what":"Remove backlinks only","title":"Introduction to tocr","text":"just remove backlinks Markdown document, set parameter add_backlinks = FALSE leave parameters untouched (except manually set position line number might adapted factor TOC lines). example:","code":"\"https://raw.githubusercontent.com/tidyverse/purrr/d0a808186e820fb637affe4d92cef2c7bf3cf6bd/README.md\" |>   # add TOC _and_ backlinks    tocr::add_toc(position = \"below\") |>   # only add TOC, remove possibly existing backlinks   tocr::add_toc(position = \"below\",                 add_backlinks = FALSE) |>   head(n = 34L) #>  [1] \"\"                                                                                                                                      #>  [2] \"<!-- README.md is generated from README.Rmd. Please edit that file -->\"                                                                #>  [3] \"\"                                                                                                                                      #>  [4] \"# purrr <img src=\\\"man/figures/logo.png\\\" align=\\\"right\\\" />\"                                                                          #>  [5] \"\"                                                                                                                                      #>  [6] \"[![CRAN\\\\_Status\\\\_Badge](http://www.r-pkg.org/badges/version/purrr)](http://cran.r-project.org/package=purrr)\"                        #>  [7] \"[![Build\"                                                                                                                              #>  [8] \"Status](https://travis-ci.org/tidyverse/purrr.svg?branch=master)](https://travis-ci.org/tidyverse/purrr)\"                              #>  [9] \"[![Coverage\"                                                                                                                           #> [10] \"Status](https://img.shields.io/codecov/c/github/tidyverse/purrr/master.svg)](https://codecov.io/github/tidyverse/purrr?branch=master)\" #> [11] \"\"                                                                                                                                      #> [12] \"<!-- TOC BEGIN -- leave this comment untouched to allow auto update -->\"                                                               #> [13] \"\"                                                                                                                                      #> [14] \"## Table of contents\"                                                                                                                  #> [15] \"\"                                                                                                                                      #> [16] \"- [Overview](#overview)\"                                                                                                               #> [17] \"- [Installation](#installation)\"                                                                                                       #> [18] \"- [Usage](#usage)\"                                                                                                                     #> [19] \"- [Code of conduct](#code-of-conduct)\"                                                                                                 #> [20] \"\"                                                                                                                                      #> [21] \"<!-- TOC END -- leave this comment untouched to allow auto update -->\"                                                                 #> [22] \"\"                                                                                                                                      #> [23] \"## Overview\"                                                                                                                           #> [24] \"\"                                                                                                                                      #> [25] \"purrr enhances R’s functional programming (FP) toolkit by providing a\"                                                                 #> [26] \"complete and consistent set of tools for working with functions and\"                                                                   #> [27] \"vectors. If you’ve never heard of FP before, the best place to start is\"                                                               #> [28] \"the family of `map()` functions which allow you to replace many for\"                                                                   #> [29] \"loops with code that is both more succinct and easier to read. The best\"                                                               #> [30] \"place to learn about the `map()` functions is the [iteration\"                                                                          #> [31] \"chapter](http://r4ds.had.co.nz/iteration.html) in R for data science.\"                                                                 #> [32] \"\"                                                                                                                                      #> [33] \"## Installation\"                                                                                                                       #> [34] \"\""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"remove-leftover-backlinks-to-custom-html-anchorid-attribute","dir":"Articles","previous_headings":"Remove a TOC from an (R) Markdown document","what":"Remove leftover backlinks to custom HTML anchor/<id> attribute","title":"Introduction to tocr","text":"Consider added TOC Markdown document using non-header style title_tier (like \"bold\") strange toc_id like \"navigation_centre\". Now just feeding document add_toc() remove_toc() … remove? remove?","code":""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"particular-toc-features","dir":"Articles","previous_headings":"","what":"Particular TOC features","title":"Introduction to tocr","text":"following, effects setting specific parameters add_toc() function explained detail.","code":""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"toc-minimum-and-maximum-tiers-to-include","dir":"Articles","previous_headings":"Particular TOC features","what":"TOC minimum and maximum tiers to include","title":"Introduction to tocr","text":"parameters min_tier max_tier define possible header tiers <h1> – <h6> considered TOC. default, <h1> considered usually serves title document wouldn’t make sense include TOC. Markdown document deviates premise, might wanna set min_tier hand. Fira Code README.md example doesn’t include <h1> headers2, instead title formatted <h2>. Therefore wanna set min_tier = 3 obtain reasonable TOC: way can restrict maximum tier included TOC. don’t want mention anything tier <h3> example, set max_tier = 3:","code":"tocr::add_toc(md = \"https://raw.githubusercontent.com/tonsky/FiraCode/30862e05b00f41c9179a9424e382755a5ef954f0/README.md\",               min_tier = 3L) |>   magrittr::extract(1:25) |>   pal::cat_lines() #> ## Fira Code: monospaced font with programming ligatures #>  #> <!-- TOC BEGIN -- leave this comment untouched to allow auto update --> #>  #> ### Table of contents #>  #> - [Problem](#-problem) #> - [Solution](#-solution) #>     - [Download v1.205 · How to install · Troubleshooting · News & updates](#-download-v1205--how-to-install--troubleshooting--news--updates) #> - [Code examples](#-code-examples) #> - [Terminal support](#-terminal-support) #> - [Editor support](#-editor-support) #> - [Browser support](#-browser-support) #> - [Projects using Fira Code](#-projects-using-fira-code) #> - [Alternatives](#-alternatives) #> - [Credits](#-credits) #>  #> <!-- TOC END -- leave this comment untouched to allow auto update --> #>  #> <img src=\"http://s.tonsky.me/imgs/fira_code_logo.svg\"> #>  #> ### [↑](#table-of-contents) Problem #>  #> Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like `->`, `<=` or `:=` are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet. tocr::add_toc(md = \"https://raw.githubusercontent.com/tonsky/FiraCode/30862e05b00f41c9179a9424e382755a5ef954f0/README.md\",               max_tier = 3L) |>   magrittr::extract(1:25) |>   pal::cat_lines() #> ## [↓](#table-of-contents) Fira Code: monospaced font with programming ligatures #>  #> <!-- TOC BEGIN -- leave this comment untouched to allow auto update --> #>  #> ## Table of contents #>  #> - [Fira Code: monospaced font with programming ligatures](#-fira-code-monospaced-font-with-programming-ligatures) #>     - [Problem](#-problem) #>     - [Solution](#-solution) #>     - [Code examples](#-code-examples) #>     - [Terminal support](#-terminal-support) #>     - [Editor support](#-editor-support) #>     - [Browser support](#-browser-support) #>     - [Projects using Fira Code](#-projects-using-fira-code) #>     - [Alternatives](#-alternatives) #>     - [Credits](#-credits) #>  #> <!-- TOC END -- leave this comment untouched to allow auto update --> #>  #> <img src=\"http://s.tonsky.me/imgs/fira_code_logo.svg\"> #>  #> ### [↑](#table-of-contents) Problem #>  #> Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like `->`, `<=` or `:=` are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that’s not the case yet."},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"toc-positioning","dir":"Articles","previous_headings":"Particular TOC features","what":"TOC positioning","title":"Introduction to tocr","text":"place TOC including surrounding TOC BEGIN \"TOC END comments defined position argument. can either : \"top\" place TOC beginning document, .e. line 1. \"bottom\" place TOC end document. \"\" place TOC lines uppermost header tier <= min_tier next header (). \"\" place TOC lines uppermost header tier <= min_tier next header (), .e. right uppermost header tier <= min_tier. \"none\" remove existing TOC. line number positive integer insert TOC right line.","code":""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"difference-between-above-and-below","dir":"Articles","previous_headings":"Particular TOC features > TOC positioning","what":"Difference between above and below","title":"Introduction to tocr","text":"…","code":"\"https://raw.githubusercontent.com/mkearney/rtweet/ff5ac6cf48f63f0685beda6d5fed03388c51b7f2/README.md\" #> [1] \"https://raw.githubusercontent.com/mkearney/rtweet/ff5ac6cf48f63f0685beda6d5fed03388c51b7f2/README.md\""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"toc-listing_style","dir":"Articles","previous_headings":"Particular TOC features","what":"TOC listing_style","title":"Introduction to tocr","text":"three possible ways list TOC entries parameter listing_style defines one . Possible : unordered Markdown list. Set listing_style - * respective listing symbols. ordered Markdown list. Set listing_style = \"ordered\" . Just plain text indented non-breaking spaces (&nbsp;) according hierarchy headers. Set listing_style = \"indented\" . first two options seem aesthetically superior, last one particularly useful two situations: Consider Markdown document numbered headers like # 1. Introduction. Consider Markdown document strange header hierarchy… Notice: add_toc() checks first TOC entry lowest tier included TOC, , automatically sets listing_style = \"indented\" avoid broken Markdown list (happens, warning message printed ).","code":""},{"path":"https://tocr.rpkg.dev/dev/articles/tocr.html","id":"toc-markdown_flavor","dir":"Articles","previous_headings":"Particular TOC features","what":"TOC markdown_flavor","title":"Introduction to tocr","text":"…","code":""},{"path":"https://tocr.rpkg.dev/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salim Brüggemann. Author, maintainer.","code":""},{"path":"https://tocr.rpkg.dev/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brüggemann S (2024). tocr: TOC Generation (R) Markdown Documents. R package version 0.1.9001, https://gitlab.com/rpkg.dev/tocr, https://tocr.rpkg.dev.","code":"@Manual{,   title = {tocr: TOC Generation for (R) Markdown Documents},   author = {Salim Brüggemann},   year = {2024},   note = {R package version 0.1.9001, https://gitlab.com/rpkg.dev/tocr},   url = {https://tocr.rpkg.dev}, }"},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"tocr","dir":"","previous_headings":"","what":"TOC Generation for (R) Markdown Documents","title":"TOC Generation for (R) Markdown Documents","text":"tocr allows automatically add/update/remove table contents (TOC) /(R) Markdown document. Internal links compatible HTML “anchors”, commonly referred “# links” pointing HTML fragment identifiers generated sites like GitHub GitLab rendering Markdown. tocr supports backlinks ease navigation within large documents well options tailor TOC specific needs. can also convert wide range similar auto-generated TOC formats one.","code":""},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"TOC Generation for (R) Markdown Documents","text":"tocr uses following two HTML comments mark beginning end auto-generated TOC: tocr::add_toc() supports comment format similar software like doctoc. stumble upon software-generated Markdown TOCs aren’t recognized tocr::add_toc(), feel free file issue even add support submit merge request.","code":"<!-- TOC BEGIN -- leave this comment untouched to allow auto update --> <!-- TOC END -- leave this comment untouched to allow auto update -->"},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"TOC Generation for (R) Markdown Documents","text":"install latest development version tocr, run following R:","code":"if (!(\"remotes\" %in% rownames(installed.packages()))) {   install.packages(pkgs = \"remotes\",                    repos = \"https://cloud.r-project.org/\") }  remotes::install_gitlab(repo = \"rpkg.dev/tocr\")"},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"TOC Generation for (R) Markdown Documents","text":"introduction package given . (function) reference found .","code":""},{"path":[]},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"r-markdown-format","dir":"","previous_headings":"Development","what":"R Markdown format","title":"TOC Generation for (R) Markdown Documents","text":"package’s source code written R Markdown file format facilitate practices commonly referred literate programming. allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . .gen.R suffixed R source code found R/ generated respective R Markdown counterparts Rmd/ using pkgpurl::purl_rmd()1. Always make changes .Rmd files – never .R files – run pkgpurl::purl_rmd() regenerate R source files.","code":""},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"coding-style","dir":"","previous_headings":"Development","what":"Coding style","title":"TOC Generation for (R) Markdown Documents","text":"package borrows lot Tidyverse design philosophies. R code adheres principles specified Tidyverse Design Guide wherever possible formatted according Tidyverse Style Guide (TSG) following exceptions: Line width limited 160 characters, double limit proposed TSG (80 characters ridiculously little given today’s high-resolution wide screen monitors). Furthermore, preferred style breaking long lines differs. Instead wrapping directly expression’s opening bracket suggested TSG, prefer two fewer line breaks indent subsequent lines within expression opening bracket: results less vertical horizontal spread code better readability pipes. Usage magrittr’s compound assignment pipe-operator %<>% desirable2. Usage R’s right-hand assignment operator -> allowed3. R source code split several files suggested TSG instead (far possible) kept single file Rmd/tocr.Rmd well-structured thanks Markdown support. far possible, deviations TSG plus additional restrictions formally specified pkgpurl::default_linters, (default) used pkgpurl::lint_rmd(), turn recommended way lint package.","code":"# TSG proposes this do_something_very_complicated(   something = \"that\",   requires = many,   arguments = \"some of which may be long\" )  # we prefer this do_something_very_complicated(something = \"that\",                               requires = many,                               arguments = \"some of which may be long\")"},{"path":"https://tocr.rpkg.dev/dev/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"TOC Generation for (R) Markdown Documents","text":"doctoc similar solution add TOCs Markdown documents implemented JavaScript. served sort inspiration tocr. Markdown TOC Atom package auto-generates TOCs. remark-toc TOC generator plugin JavaScript-based Markdown processor remark. Tocdown another Markdown TOC generator written JavaScript Ruby. render_toc() Garrick Aden-Buie, simple function extract headers (R) Markdown document build TOC. blog post provides background.","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"DESCRIPTION Blabla...","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"","code":"add_toc(   md,   min_tier = 2L,   max_tier = 6L,   position = \"above\",   md_flavor = c(\"github\", \"gitlab\"),   add_title = TRUE,   title = \"Table of contents\",   title_tier = min_tier,   add_backlinks = add_title,   backlink_strings = c(\"↑\", \"↓\"),   backlink_position = c(\"before\", \"after\"),   listing_style = c(\"-\", \"*\", \"ordered\", \"indented\"),   toc_id = \"toc\",   old_toc_id = toc_id )"},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"md (R) Markdown document processed single file path, single URL character vector (one string per line). min_tier Minimum tier headers (<h1> – <h6>) include TOC. Integer 1 6. min_tier = 2 example means create TOC entries <h2> headers. max_tier Maximum tier headers (<h1> – <h6>) include TOC. Integer 1 6. max_tier = 5 example means create TOC entries headers <h5>. max_tier must >= min_tier. position Position Markdown document add TOC. Possible values include: \"top\": beginning document, .e. first line. \"bottom\": end document, .e. last line. \"\": lines uppermost header tier <= min_tier next header (). \"\": lines uppermost header tier <= min_tier next header (), .e. right uppermost header tier <= min_tier. \"none\": remove possibly existing TOC. line number, given positive integer. md_flavor Markdown flavor. Possible values include: \"github\": \"gitlab\": add_title Include TOC title? Logical. Note backlinks added add_title = FALSE header line found position, regardless add_backlinks = TRUE. title Title TOC. character scalar. title_tier Tier/formatting TOC title. Possible values include: integer 1L 6L representing <h1> – <h6> tier. \"regular\": Simple unformatted non-header text. \"bold\": Bold (<strong>) non-header text. \"italic\": Italic (<em>) non-header text. add_backlinks Add link back TOC Markdown header. logical scalar. Note add_backlinks = TRUE add_title = FALSE, fallback backlinks point next header line position (found). also case md_flavor = \"gitlab\" title_tier set non-header value (\"regular\", \"bold\" \"italic\") GitLab currently ignores manually set HTML <id> attributes. backlink_strings String(s) use link text back TOC. character vector length 1 2. two strings provided, first one used backlinks position, second one backlinks position. backlink_position Position backlinks. Possible values include: \"\": actual header text. \"\": actual header text. listing_style Format use listing TOC entries. Possible values include: \"-\": Create unordered list using hyphen listing symbol. \"*\": Create unordered list using asterisk listing symbol. \"ordered\": Create ordered list using 1, 2, 3, ...  listing symbols. \"indented\": Use non-breaking spaces (&nbsp;) create visual indentation. Useful headers already numbered. toc_id HTML <id> attribute TOC title title_tier set non-header value (\"regular\", \"bold\" \"italic\"). character scalar. old_toc_id HTML <id> attribute old TOC title (order old backlinks ID toc_id removed). character scalar.","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"processed Markdown document character vector (one string per line).","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"function tries adhere CommonMark specification, .e. interpret Markdown syntax way commonmark.js reference implementation <try.commonmark.org> .","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/add_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table of contents (TOC) to an (R) Markdown document — add_toc","text":"","code":"md <- paste0(\"https://raw.githubusercontent.com/ropensci/pdftools/\",              \"e7248d9956c7e73968628fa3a8ed37f0a8c23b37/README.md\")  md |>   tocr::add_toc(position = 9) |>   pal::cat_lines() #> # pdftools #>  #> [![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active) #> [![Build Status](https://travis-ci.org/ropensci/pdftools.svg?branch=master)](https://travis-ci.org/ropensci/pdftools) #> [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/ropensci/pdftools?branch=master&svg=true)](https://ci.appveyor.com/project/jeroen/pdftools) #> [![Coverage Status](https://codecov.io/github/ropensci/pdftools/coverage.svg?branch=master)](https://codecov.io/github/ropensci/pdftools?branch=master) #> [![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/pdftools)](http://cran.r-project.org/package=pdftools) #> [![CRAN RStudio mirror downloads](http://cranlogs.r-pkg.org/badges/pdftools)](http://cran.r-project.org/web/packages/pdftools/index.html) #>  #> <!-- TOC BEGIN -- leave this comment untouched to allow auto update --> #>  #> ## Table of contents #>  #> - [Introduction](#-introduction) #> - [Installation](#-installation) #>     - [Building from source](#-building-from-source) #> - [Getting started](#-getting-started) #> - [Bonus feature: rendering pdf](#-bonus-feature-rendering-pdf) #> - [Limitations](#-limitations) #>  #> <!-- TOC END -- leave this comment untouched to allow auto update --> #>  #> ## [↑](#table-of-contents) Introduction #>  #> Scientific articles are typically locked away in PDF format, a format designed primarily for printing but not so great for searching or indexing. The new pdftools package allows for extracting text and metadata from pdf files in R. From the extracted plain-text one could find articles discussing a particular drug or species name, without having to rely on publishers providing metadata, or pay-walled search engines. #>  #> The pdftools slightly overlaps with the Rpoppler package by Kurt Hornik. The main motivation behind developing pdftools was that Rpoppler depends on glib, which does not work well on Mac and Windows. The pdftools package uses the poppler c++ interface together with Rcpp, which results in a lighter and more portable implementation. #>  #>  #> ## [↑](#table-of-contents) Installation #>  #> On Windows and Mac the binary packages can be installed directly from CRAN: #>  #> ```r #> install.packages(\"pdftools\") #> ``` #>  #> Installation on Linux requires the poppler development library. On Debian/Ubuntu: #>  #> ``` #> sudo apt-get install libpoppler-cpp-dev #> ``` #>  #> If you want to install the package from source on Mac OS-X you need brew: #>  #> ``` #> brew install poppler #> ``` #>  #> On Fedora: #>  #> ``` #> sudo yum install poppler-cpp-devel #> ``` #>  #> ### [↑](#table-of-contents) Building from source #>  #> On CentOS the `libpoppler-cpp` library is not included with the system so we need to build from source. Note that recent versions of poppler require C++11 which is not available on CentOS, so we build a slightly older version of libpoppler. #>  #> ```sh #> # Build dependencies #> yum install wget xz libjpeg-devel openjpeg2-devel #>  #> # Download and extract #> wget https://poppler.freedesktop.org/poppler-0.47.0.tar.xz #> tar -Jxvf poppler-0.47.0.tar.xz #> cd poppler-0.47.0 #>  #> # Build and install #> ./configure #> make #> sudo make install #> ``` #>  #> By default libraries get installed in `/usr/local/lib` and `/usr/local/include`. On CentOS this is not a default search path so we need to set `PKG_CONFIG_PATH` and  `LD_LIBRARY_PATH` to point R to the right directory: #>  #> ```sh #> export LD_LIBRARY_PATH=\"/usr/local/lib\" #> export PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" #> ``` #>  #> We can then start R and install `pdftools`. #>  #> ## [↑](#table-of-contents) Getting started #>  #> The `?pdftools` manual page shows a brief overview of the main utilities. The most important function is `pdf_text` which returns a character vector of length equal to the number of pages in the pdf. Each string in the vector contains a plain text version of the text on that page. #>  #> ```r #> library(pdftools) #> download.file(\"http://arxiv.org/pdf/1403.2805.pdf\", \"1403.2805.pdf\", mode = \"wb\") #> txt <- pdf_text(\"1403.2805.pdf\") #>  #> # first page text #> cat(txt[1]) #>  #> # second page text #> cat(txt[2]) #> ``` #>  #> In addition, the package has some utilities to extract other data from the PDF file. The `pdf_toc` function shows the table of contents, i.e. the section headers which pdf readers usually display in a menu on the left. It looks pretty in JSON: #>  #> ```r #> # Table of contents #> toc <- pdf_toc(\"1403.2805.pdf\") #>  #> # Show as JSON #> jsonlite::toJSON(toc, auto_unbox = TRUE, pretty = TRUE) #> ``` #>  #> Other functions provide information about fonts, attachments and metadata such as the author, creation date or tags. #>  #>  #> ```r #> # Author, version, etc #> info <- pdf_info(\"1403.2805.pdf\") #>  #> # Table with fonts #> fonts <- pdf_fonts(\"1403.2805.pdf\") #> ``` #>  #> ## [↑](#table-of-contents) Bonus feature: rendering pdf #>  #> A bonus feature on most platforms is rendering of PDF files to bitmap arrays. The poppler library provides all functionality to implement a complete PDF reader, including graphical display of the content. In R we can use `pdf_render_page` to render a page of the PDF into a bitmap, which can be stored as e.g. png or jpeg. #>  #> ```r #> # renders pdf to bitmap array #> bitmap <- pdf_render_page(\"1403.2805.pdf\", page = 1) #>  #> # save bitmap image #> png::writePNG(bitmap, \"page.png\") #> jpeg::writeJPEG(bitmap, \"page.jpeg\") #> webp::write_webp(bitmap, \"page.webp\") #> ``` #>  #> This feature is still experimental and currently does not work on Windows. #>  #> ## [↑](#table-of-contents) Limitations #>  #> Data scientists are often interested in data from tables. Unfortunately the pdf format is pretty dumb and does not have notion of a table (unlike for example HTML). Tabular data in a pdf file is nothing more than strategically positioned lines and text, which makes it difficult to extract the raw data. #>  #> ```r #> txt <- pdf_text(\"http://arxiv.org/pdf/1406.4806.pdf\") #>  #> # some tables #> cat(txt[18]) #> cat(txt[19]) #> ``` #>  #> Pdftools usually does a decent job in retaining the positioning of table elements when converting from pdf to text. But the output is still very dependent on the formatting of the original pdf table, which makes it very difficult to write a generic table extractor. But with a little creativity you might be able to parse the table data from the text output of a given paper. #>  #>  #> [![](http://ropensci.org/public_images/github_footer.png)](http://ropensci.org)  md |>   tocr::add_toc(listing_style = \"ordered\") |>   pal::cat_lines() #> # pdftools #>  #> <!-- TOC BEGIN -- leave this comment untouched to allow auto update --> #>  #> ## Table of contents #>  #> 1. [Introduction](#-introduction) #> 2. [Installation](#-installation) #>     1. [Building from source](#-building-from-source) #> 1. [Getting started](#-getting-started) #> 2. [Bonus feature: rendering pdf](#-bonus-feature-rendering-pdf) #> 3. [Limitations](#-limitations) #>  #> <!-- TOC END -- leave this comment untouched to allow auto update --> #>  #> [![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active) #> [![Build Status](https://travis-ci.org/ropensci/pdftools.svg?branch=master)](https://travis-ci.org/ropensci/pdftools) #> [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/ropensci/pdftools?branch=master&svg=true)](https://ci.appveyor.com/project/jeroen/pdftools) #> [![Coverage Status](https://codecov.io/github/ropensci/pdftools/coverage.svg?branch=master)](https://codecov.io/github/ropensci/pdftools?branch=master) #> [![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/pdftools)](http://cran.r-project.org/package=pdftools) #> [![CRAN RStudio mirror downloads](http://cranlogs.r-pkg.org/badges/pdftools)](http://cran.r-project.org/web/packages/pdftools/index.html) #>  #> ## [↑](#table-of-contents) Introduction #>  #> Scientific articles are typically locked away in PDF format, a format designed primarily for printing but not so great for searching or indexing. The new pdftools package allows for extracting text and metadata from pdf files in R. From the extracted plain-text one could find articles discussing a particular drug or species name, without having to rely on publishers providing metadata, or pay-walled search engines. #>  #> The pdftools slightly overlaps with the Rpoppler package by Kurt Hornik. The main motivation behind developing pdftools was that Rpoppler depends on glib, which does not work well on Mac and Windows. The pdftools package uses the poppler c++ interface together with Rcpp, which results in a lighter and more portable implementation. #>  #>  #> ## [↑](#table-of-contents) Installation #>  #> On Windows and Mac the binary packages can be installed directly from CRAN: #>  #> ```r #> install.packages(\"pdftools\") #> ``` #>  #> Installation on Linux requires the poppler development library. On Debian/Ubuntu: #>  #> ``` #> sudo apt-get install libpoppler-cpp-dev #> ``` #>  #> If you want to install the package from source on Mac OS-X you need brew: #>  #> ``` #> brew install poppler #> ``` #>  #> On Fedora: #>  #> ``` #> sudo yum install poppler-cpp-devel #> ``` #>  #> ### [↑](#table-of-contents) Building from source #>  #> On CentOS the `libpoppler-cpp` library is not included with the system so we need to build from source. Note that recent versions of poppler require C++11 which is not available on CentOS, so we build a slightly older version of libpoppler. #>  #> ```sh #> # Build dependencies #> yum install wget xz libjpeg-devel openjpeg2-devel #>  #> # Download and extract #> wget https://poppler.freedesktop.org/poppler-0.47.0.tar.xz #> tar -Jxvf poppler-0.47.0.tar.xz #> cd poppler-0.47.0 #>  #> # Build and install #> ./configure #> make #> sudo make install #> ``` #>  #> By default libraries get installed in `/usr/local/lib` and `/usr/local/include`. On CentOS this is not a default search path so we need to set `PKG_CONFIG_PATH` and  `LD_LIBRARY_PATH` to point R to the right directory: #>  #> ```sh #> export LD_LIBRARY_PATH=\"/usr/local/lib\" #> export PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig\" #> ``` #>  #> We can then start R and install `pdftools`. #>  #> ## [↑](#table-of-contents) Getting started #>  #> The `?pdftools` manual page shows a brief overview of the main utilities. The most important function is `pdf_text` which returns a character vector of length equal to the number of pages in the pdf. Each string in the vector contains a plain text version of the text on that page. #>  #> ```r #> library(pdftools) #> download.file(\"http://arxiv.org/pdf/1403.2805.pdf\", \"1403.2805.pdf\", mode = \"wb\") #> txt <- pdf_text(\"1403.2805.pdf\") #>  #> # first page text #> cat(txt[1]) #>  #> # second page text #> cat(txt[2]) #> ``` #>  #> In addition, the package has some utilities to extract other data from the PDF file. The `pdf_toc` function shows the table of contents, i.e. the section headers which pdf readers usually display in a menu on the left. It looks pretty in JSON: #>  #> ```r #> # Table of contents #> toc <- pdf_toc(\"1403.2805.pdf\") #>  #> # Show as JSON #> jsonlite::toJSON(toc, auto_unbox = TRUE, pretty = TRUE) #> ``` #>  #> Other functions provide information about fonts, attachments and metadata such as the author, creation date or tags. #>  #>  #> ```r #> # Author, version, etc #> info <- pdf_info(\"1403.2805.pdf\") #>  #> # Table with fonts #> fonts <- pdf_fonts(\"1403.2805.pdf\") #> ``` #>  #> ## [↑](#table-of-contents) Bonus feature: rendering pdf #>  #> A bonus feature on most platforms is rendering of PDF files to bitmap arrays. The poppler library provides all functionality to implement a complete PDF reader, including graphical display of the content. In R we can use `pdf_render_page` to render a page of the PDF into a bitmap, which can be stored as e.g. png or jpeg. #>  #> ```r #> # renders pdf to bitmap array #> bitmap <- pdf_render_page(\"1403.2805.pdf\", page = 1) #>  #> # save bitmap image #> png::writePNG(bitmap, \"page.png\") #> jpeg::writeJPEG(bitmap, \"page.jpeg\") #> webp::write_webp(bitmap, \"page.webp\") #> ``` #>  #> This feature is still experimental and currently does not work on Windows. #>  #> ## [↑](#table-of-contents) Limitations #>  #> Data scientists are often interested in data from tables. Unfortunately the pdf format is pretty dumb and does not have notion of a table (unlike for example HTML). Tabular data in a pdf file is nothing more than strategically positioned lines and text, which makes it difficult to extract the raw data. #>  #> ```r #> txt <- pdf_text(\"http://arxiv.org/pdf/1406.4806.pdf\") #>  #> # some tables #> cat(txt[18]) #> cat(txt[19]) #> ``` #>  #> Pdftools usually does a decent job in retaining the positioning of table elements when converting from pdf to text. But the output is still very dependent on the formatting of the original pdf table, which makes it very difficult to write a generic table extractor. But with a little creativity you might be able to parse the table data from the text output of a given paper. #>  #>  #> [![](http://ropensci.org/public_images/github_footer.png)](http://ropensci.org)"},{"path":"https://tocr.rpkg.dev/dev/reference/convert_header_to_anchor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert header text to HTML anchor — convert_header_to_anchor","title":"Convert header text to HTML anchor — convert_header_to_anchor","text":"Convert header text HTML anchor","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/convert_header_to_anchor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert header text to HTML anchor — convert_header_to_anchor","text":"","code":"convert_header_to_anchor(   header_text,   md_flavor,   preceding_anchor_links = character(),   backlink_string = character(),   backlink_position )"},{"path":"https://tocr.rpkg.dev/dev/reference/evaluate_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate position — evaluate_position","title":"Evaluate position — evaluate_position","text":"Evaluate position","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/evaluate_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate position — evaluate_position","text":"","code":"evaluate_position(position, position_offset, md_lines, min_tier, filename)"},{"path":"https://tocr.rpkg.dev/dev/reference/get_non_code_block_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get non-code-block indices — get_non_code_block_indices","title":"Get non-code-block indices — get_non_code_block_indices","text":"Get non-code-block indices","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/get_non_code_block_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get non-code-block indices — get_non_code_block_indices","text":"","code":"get_non_code_block_indices(md_lines)"},{"path":"https://tocr.rpkg.dev/dev/reference/handle_existing_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle existing TOC (integrity checks and removal) — handle_existing_toc","title":"Handle existing TOC (integrity checks and removal) — handle_existing_toc","text":"Handle existing TOC (integrity checks removal)","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/handle_existing_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle existing TOC (integrity checks and removal) — handle_existing_toc","text":"","code":"handle_existing_toc(md_lines, non_code_block_indices, position, filename)"},{"path":"https://tocr.rpkg.dev/dev/reference/process_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Markdown document line by line (clean it and build new TOC entries) — process_md","title":"Process Markdown document line by line (clean it and build new TOC entries) — process_md","text":"Process Markdown document line line (clean build new TOC entries)","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/process_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Markdown document line by line (clean it and build new TOC entries) — process_md","text":"","code":"process_md(   md_lines,   non_code_block_indices,   min_tier,   max_tier,   md_flavor,   add_backlinks,   backlink_strings,   backlink_position,   toc_id,   old_toc_id,   new_toc_id,   new_toc_id_position,   use_fallback,   is_header_title )"},{"path":"https://tocr.rpkg.dev/dev/reference/remove_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","title":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","text":"simple convenience wrapper add_toc(..., position = \"none\").","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/remove_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","text":"","code":"remove_toc(md, old_toc_id = \"toc\")"},{"path":"https://tocr.rpkg.dev/dev/reference/remove_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","text":"md (R) Markdown document processed single file path, single URL character vector (one string per line). old_toc_id HTML <id> attribute old TOC title (order old backlinks ID toc_id removed). character scalar.","code":""},{"path":"https://tocr.rpkg.dev/dev/reference/remove_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","text":"processed Markdown document character vector (one string per line).","code":""},{"path":[]},{"path":"https://tocr.rpkg.dev/dev/reference/remove_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an auto-generated table of contents (TOC) from an (R) Markdown document — remove_toc","text":"","code":"if (FALSE) { # \\dontrun{ tocr::remove_toc(md = paste0(\"https://raw.githubusercontent.com/thlorenz/doctoc/\",                              \"1d386261972d35c6bcd187d0a00e666f9d893d8d/README.md\")) |>   pal::cat_lines()} # }"},{"path":"https://tocr.rpkg.dev/dev/reference/tocr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tocr: TOC Generation for (R) Markdown Documents — tocr-package","title":"tocr: TOC Generation for (R) Markdown Documents — tocr-package","text":"tocr allows automatically add/update/remove table contents (TOC) /(R) Markdown document. Internal links compatible HTML \"anchors\", commonly referred \"# links\" pointing HTML fragment identifiers generated sites like GitHub GitLab rendering Markdown. tocr supports backlinks ease navigation within large documents well options tailor TOC specific needs. can also convert wide range similar auto-generated TOC formats one.","code":""},{"path":[]},{"path":"https://tocr.rpkg.dev/dev/reference/tocr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tocr: TOC Generation for (R) Markdown Documents — tocr-package","text":"Maintainer: Salim Brüggemann salim-b@pm.(ORCID)","code":""}]
